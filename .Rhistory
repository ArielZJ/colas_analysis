#changing to wide so that One row per colour pair per participant (4 ratings per row, first and second pass and reverse order)
AsIndata_wide <- reshape(AsIndata, idvar = "Colourpairperparticipant", timevar = "Temporder", direction = "wide")
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn <- (AsIndata_wide$similarity.first - AsIndata_wide$similarity.second)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
}
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
theme(axis.text.y = element_text(colour=AsIndata_wide$hex1.second))
AsIndata_wide$hex1.second
unique(AsIndata_wide$hex1.second)
order(unique(AsIndata_wide$hex1.second))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
theme(axis.text.y = element_text(colour=order(unique(AsIndata_wide$hex1.second))))
colour.list <- order(unique(AsIndata_wide$hex1.second))
colour.list
colour.list <- unique(AsIndata_wide$hex1.second)
colour.list <- sort(unique(AsIndata_wide$hex1.second))
colour.list
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
theme(axis.text.y = element_text(colour=sort(unique(AsIndata_wide$hex1.second))))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
theme(axis.text.y = element_text(size= 10, colour=sort(unique(AsIndata_wide$hex1.second))))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90,hjust=1))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))+
scale_fill_gradientn(colours = c("white","black"),
limits = c(0,7),
breaks=c(0,1,2,3,4,5,6,7),
na.value='green')
# factor the dataframes for the plot function
dissimdata2 <- function(trialdata, colours){
# refactor the levels so they can be plotted properly later if need be
trialdata$hex1 <- with(trialdata, factor(hex1, levels = colours))
trialdata$hex2 <- with(trialdata, factor(hex2, levels = colours))
return(trialdata)
}
####From Massive Dissimilarity Judgement Ariel
#Getting hex colour from existing script
firstColourSetHEX <- c(trialdata$hex1)
secondColourSetHEX <- c(trialdata$hex2)
# colourSetHEX is used as a reference throughout the rest of the analysis for the colour pair comparisons
colourSetHEX <- data.frame(firstColour = trialdata$hex1, secondColour = trialdata$hex2)
rowsTotalSetHEX <- rbind(data.frame(colour = firstColourSetHEX), data.frame(colour = secondColourSetHEX)) %>% group_by_all %>% count
# preliminary check that the data has been read in correctly
countOfUniqueRowsFirstSet <- length(unique(firstColourSetHEX))
countOfUniqueRowsSecondSet <- length(unique(secondColourSetHEX))
rowsTotalSetHEX <- rbind(data.frame(colour = firstColourSetHEX), data.frame(colour = secondColourSetHEX)) %>% group_by_all
countOfUniqueRowsTotalSet <- length(rowsTotalSetHEX$colour)
# set lower triangle of matrix to NA - this gives heatmap its unique upper triangle
upperTriangularMatrix <- upper.tri(matrix(1, ncol = countOfUniqueRowsFirstSet, nrow = countOfUniqueRowsFirstSet),
diag = FALSE)
color.mat.df <- data.frame(upperTriangularMatrix)
color.mat <- upperTriangularMatrix
#Converting to dataframe to be able to use code just below that uses $
firstColourSetHEX.df <- as.data.frame(firstColourSetHEX)
# setting all give colours as both row and column names
colnames(color.mat.df) <- rownames(color.mat.df) <- firstColourSetHEX.df$firstColourSetHEX
colnames(color.mat) <- rownames(color.mat) <- firstColourSetHEX.df$firstColourSetHEX
library(readxl)
library(readr)
setwd("~/thesis")
factors <- read_csv("Colour order from Ariel.xlsx")
factors <- read_xlsx("Colour order from Ariel.xlsx")
factors <- as.list(read_xlsx("Colour order from Ariel.xlsx"))
View(factors)
View(factors)
ggplot(AsIndata_wide) +
aes(x = factor(hex1.first, levels = factors), y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
flower <- c('virginica', 'versicolor', 'setosa'))
flower <- c('virginica', 'versicolor', 'setosa')
factors <- c(factors)
f <- c(factors)
class(f)
ggplot(AsIndata_wide) +
aes(x = factor(hex1.first, levels = f), y = hex1.second, fill = AsIn) +
geom_tile(size = 1.5) +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
AsIndata_wide.ordered <- factor(AsIndata_wide$hex1.first, levels= factors)
library(dplyr)
View(AsIndata_wide)
#Create unique pair name by concatening first colour with second colour
colourpairs$pair <- str_c(colourpairs$hex1, '',colourpairs$hex2)
trialdata_passes$pairofcolour <- str_c(trialdata_passes$hex1, '',trialdata_passes$hex2)
#adding count of colour pairs
get_pair_hitcount<-function(x){ #get number of hits on pair of colour (x = colourpair)
pair_hitcount<-sum(trialdata_passes$pairofcolour == x)
return(pair_hitcount)
}
colourpairs$pair_hitcount <-lapply(colourpairs$pair, get_pair_hitcount)
colourpairs$pair_hitcount <- as.integer(colourpairs$pair_hitcount)
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_tile(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1))
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_tile(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.title.y = element_text(size = 7))
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_tile(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))
View(data)
View(trialdata)
View(colourpairs)
View(AsIndata_wide)
View(AsIndata)
View(trialdata_passes)
View(trialdata_passes)
#get unique hex arrangements
colourpairs <- unique(trialdata_passes[ , c("hex1", "hex2")])
#Create unique pair name by concatening first colour with second colour
colourpairs$pair <- str_c(colourpairs$hex1, '',colourpairs$hex2)
trialdata_passes$pairofcolour <- str_c(trialdata_passes$hex1, '',trialdata_passes$hex2)
#adding count of colour pairs
get_pair_hitcount<-function(x){ #get number of hits on pair of colour (x = colourpair)
pair_hitcount<-sum(trialdata_passes$pairofcolour == x)
return(pair_hitcount)
}
colourpairs$pair_hitcount <-lapply(colourpairs$pair, get_pair_hitcount)
colourpairs$pair_hitcount <- as.integer(colourpairs$pair_hitcount)
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_tile(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))
View(trialdata)
View(colourpairs)
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_tile(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))+
scale_fill_grey()
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_tile(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))+
scale_fill_gradient(low = "white", high = "black", na.value = "green")
ggplot(faithfuld, aes(waiting, eruptions)) +
geom_raster(aes(fill = density))
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_raster(size = 1.2) +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))+
scale_fill_gradient(low = "white", high = "black", na.value = "green")
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_raster() +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))+
scale_fill_gradient(low = "white", high = "black", na.value = "green")
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_raster() +
scale_fill_distiller(palette = "RdBu", direction = 1) +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_raster() +
scale_fill_distiller(palette = "RdBu", direction = 1, na.value = "green") +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill= pair_hitcount) +
geom_raster() +
theme_pubr()+
theme(axis.text.x=element_text(angle=90,hjust=1, size=7), axis.text.y = element_text(size = 7))+
scale_fill_gradient(low = "grey", high = "black", na.value = "green")
setwd("~/thesis/colas_analysis")
IH_vars<- c("participant", "Ishi_textbox.text", "imageaddress")
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
IH_perperson<-rename(IH_perperson, participant = unique.IHdata.participant.)
#get IH score as decimal
#z=participant id
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/","16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
View(IH_perperson)
IH_ordered <- IH_perperson[order(IH_perperson$score_decimal),]
View(IH_ordered)
#make dataframe with IH scores
IH_perperson<- data.frame(unique(participants_complete$participant))
IH_perperson<-rename(IH_perperson, participant = unique.IHdata.participant.)
IH_perperson<-rename(IH_perperson, participant = unique.participants_complete.participant.)
#get IH score as decimal
#z=participant id
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/","16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
IH_ordered <- IH_perperson[order(IH_perperson$score_decimal),]
View(IH_ordered)
#single participants
singleIHdata<-IHdata[IHdata$participant == "60ddd06d5358cdcab4a3c82c", ]
singleIHdata
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#make dataframe with IH scores
IH_perperson<- data.frame(unique(participants_complete$participant))
IH_perperson<-rename(IH_perperson, participant = unique.participants_complete.participant.)
#get IH score as decimal
#z=participant id
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
View(scoringtable)
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
View(scoringtable)
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#make dataframe with IH scores
IH_perperson<- data.frame(unique(participants_complete$participant))
IH_perperson<-rename(IH_perperson, participant = unique.participants_complete.participant.)
#get IH score as decimal
#z=participant id
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/","16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
IH_ordered <- IH_perperson[order(IH_perperson$score_decimal),]
#single participants
singleIHdata<-IHdata[IHdata$participant == "60ddd06d5358cdcab4a3c82c", ]
singleIHdata
View(IHdata)
#make catch data frame
IHdata<-data[IH_vars]
View(IHdata)
#remove empty cells
IHdata <- IHdata %>% drop_na()
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
View(IHdata)
#make dataframe with IH scores
IH_perperson<- data.frame(unique(participants_complete$participant))
IH_perperson<-rename(IH_perperson, participant = unique.participants_complete.participant.)
#get IH score as decimal
#z=participant id
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/","16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
IH_ordered <- IH_perperson[order(IH_perperson$score_decimal),]
#single participants
singleIHdata<-IHdata[IHdata$participant == "60ddd06d5358cdcab4a3c82c", ]
singleIHdata
IHdata$match <- IHdata$Ishi_textbox.text==IHdata$correctanswer
View(IHdata)
#make dataframe with IH scores
IH_perperson<- data.frame(unique(participants_complete$participant))
IH_perperson<-rename(IH_perperson, participant = unique.participants_complete.participant.)
#get IH score as decimal
#z=participant id
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/","16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
IH_ordered <- IH_perperson[order(IH_perperson$score_decimal),]
#single participants
singleIHdata<-IHdata[IHdata$participant == "60ddd06d5358cdcab4a3c82c", ]
singleIHdata
#single participants
singleIHdata<-IHdata[IHdata$participant == "5ec3eefc909cda09ed268192", ]
singleIHdata
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/",total_IH,"/", "16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
IH_ordered <- IH_perperson[order(IH_perperson$score_decimal),]
return(correct_IH, total_IH, IHscorefraction)
return(total_IH)
get_IHtotal_answered<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
return(total_IH)
}
IH_perperson$total_answered<-lapply(IH_perperson$participant, get_IHtotal_answered)
IH_ordered <- IH_perperson[order(IH_perperson$total_answered),]
IH_perperson$total_answered <- as.numeric(IH_perperson$total_answered)
esquisse:::esquisser()
table(IH_perperson)
table(IH_perperson$total_answered)
esquisse:::esquisser()
View(pass_correlation)
#make dataframe with IH scores
IH_perperson<- data.frame(unique(participants_complete$participant))
IH_perperson<-rename(IH_perperson, participant = unique.participants_complete.participant.)
#get IH score as fraction
#z=participant id
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/",total_IH,"/", "16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
get_IHtotal_answered<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
return(total_IH)
}
IH_perperson$total_answered<-lapply(IH_perperson$participant, get_IHtotal_answered)
IH_perperson$total_answered <- as.numeric(IH_perperson$total_answered)
#Rearrange dataframe
IH_perperson$score_decimal <- as.numeric(IH_perperson$score_decimal)
IH_ordered <- IH_perperson[order(IH_perperson$total_answered),]
IH_perperson$score <- as.numeric(IH_perperson$score_fraction)
sapply(IH_perperson$score_fraction, function(x) eval(parse(text=x)))
IH_perperson$decimal <- sapply(IH_perperson$score_fraction, function(x) eval(parse(text=x)))
esquisse:::esquisser()
